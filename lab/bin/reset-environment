#!/bin/bash

mkdir -p /eks-workshop/logs
log_file=/eks-workshop/logs/action-$(date +%s).log

exec 7>&1

logmessage() {
  echo "$@" >&7
  echo "$@" >&1
}
export -f logmessage

if [ -z "${DEV_MODE}" ]; then
  # Redirection for logging
  exec >$log_file 2> >(tee >(cat >&7))
else
  # Log the commands in dev mode
  set -o xtrace
fi

rm -f /home/ec2-user/.kube/config

aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --alias default --user-alias default

module=$1

repository_path="/eks-workshop/repository"
manifests_path="/eks-workshop/manifests"
base_path="$manifests_path/base-application"

set -Eeuo pipefail
trap 'catch $? $LINENO' EXIT

catch() {
  if [ "$1" != "0" ]; then
    logmessage "An error occurred, please contact your workshop proctor or raise an issue at https://github.com/aws-samples/eks-workshop-v2/issues"
    logmessage "The full log can be found here: $log_file"
  fi
  exec 3<&-
}

mkdir -p /eks-workshop

rm -f /home/ec2-user/environment/eks-workshop

rm -rf $manifests_path

REPOSITORY_REF=${REPOSITORY_REF:-""}

if [ ! -z "${REPOSITORY_REF}" ]; then
  rm -rf $repository_path

  logmessage "Refreshing copy of workshop repository from GitHub..."

  git clone --depth=1 --single-branch --branch=${REPOSITORY_REF} --quiet https://github.com/$REPOSITORY_OWNER/$REPOSITORY_NAME.git $repository_path
  
  logmessage ""

  cp -R $repository_path/manifests $manifests_path
elif [ -d "/manifests" ]; then
  cp -R /manifests $manifests_path
fi

ln -s $manifests_path /home/ec2-user/environment/eks-workshop

if [ ! -z "$module" ]; then
  ANALYTICS_ENDPOINT=${ANALYTICS_ENDPOINT:-""}

  if [ ! -z "$ANALYTICS_ENDPOINT" ]; then
    AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
    curl --get -s --data-urlencode "lab=$module" --data-urlencode "account_id=$AWS_ACCOUNT_ID" $ANALYTICS_ENDPOINT || true
  fi

  if [ $module = "introduction/getting-started" ]; then
    exit
  fi
fi

logmessage "Resetting the environment..."
logmessage "Tip: Read the rest of the lab introduction while you wait!"

if [ -f "/eks-workshop/hooks/cleanup.sh" ]; then
  bash /eks-workshop/hooks/cleanup.sh
fi

kubectl delete pod load-generator --ignore-not-found

kubectl delete namespace other --ignore-not-found

kubectl apply -k $base_path --prune --all \
  --prune-allowlist=autoscaling/v1/HorizontalPodAutoscaler \
  --prune-allowlist=core/v1/Service \
  --prune-allowlist=core/v1/ConfigMap \
  --prune-allowlist=apps/v1/Deployment \
  --prune-allowlist=apps/v1/StatefulSet \
  --prune-allowlist=core/v1/ServiceAccount \
  --prune-allowlist=core/v1/Secret \
  --prune-allowlist=core/v1/PersistentVolumeClaim \
  --prune-allowlist=scheduling.k8s.io/v1/PriorityClass \
  --prune-allowlist=networking.k8s.io/v1/Ingress

logmessage "Waiting for application to become ready..."

sleep 10

kubectl wait --for=condition=available --timeout=240s deployments -l app.kubernetes.io/created-by=eks-workshop -A
kubectl wait --for=condition=Ready --timeout=240s pods -l app.kubernetes.io/created-by=eks-workshop -A

# Addons
rm -rf /eks-workshop/terraform
mkdir -p /eks-workshop/terraform
cp -R $manifests_path/.workshop/terraform/* /eks-workshop/terraform

export TF_VAR_eks_cluster_id="$EKS_CLUSTER_NAME"

RESOURCES_PRECREATED=${RESOURCES_PRECREATED:-"false"}

logmessage "Cleaning up previous lab infrastructure..."

tf_dir=$(realpath --relative-to="$PWD" '/eks-workshop/terraform')

terraform -chdir="$tf_dir" init -upgrade
terraform -chdir="$tf_dir" destroy --auto-approve

rm -rf /eks-workshop/hooks

if [ ! -z "$module" ]; then
  module_path="$manifests_path/modules/$module"

  if [ -f "$module_path/.workshop/cleanup.sh" ]; then
    mkdir -p /eks-workshop/hooks
    cp "$module_path/.workshop/cleanup.sh" /eks-workshop/hooks
  fi

  if [ -f "$module_path/.workshop/terraform/main.tf" ]; then
    logmessage "Creating infrastructure for next lab..."

    cp -R $module_path/.workshop/terraform/* /eks-workshop/terraform/lab

    export TF_VAR_resources_precreated="$RESOURCES_PRECREATED"

    terraform -chdir="$tf_dir" init -upgrade
    terraform -chdir="$tf_dir" apply -refresh=false --auto-approve
  elif [ -f "$module_path/.workshop/terraform/addon.tf" ]; then
    # This is the deprecated legacy code path that will be removed
    logmessage "Creating infrastructure for next lab..."

    cp -R $module_path/.workshop/terraform/* /eks-workshop/terraform

    if [ "$RESOURCES_PRECREATED" = "true" ]; then
      rm -f /eks-workshop/terraform/addon_infrastructure.tf
    fi

    terraform -chdir="$tf_dir" init -upgrade
    terraform -chdir="$tf_dir" apply -refresh=false --auto-approve
  fi

  if [ -d "$module_path/.workshop/manifests" ]; then
    kubectl apply -k "$module_path/.workshop/manifests"
  fi
fi

terraform -chdir="$tf_dir" output -json | jq -r '.environment.value | select(. != null)' > ~/.bashrc.d/workshop-env.bash

# Recycle workload pods in case stateful pods got restarted
kubectl delete pod -l app.kubernetes.io/created-by=eks-workshop -l app.kubernetes.io/component=service -A

kubectl wait --for=condition=Ready --timeout=240s pods -l app.kubernetes.io/created-by=eks-workshop -A

# Finished
logmessage 'Environment is ready'
